---
layout: post
title:  "好的 API 文档应该具备这十大要素"
date:   2017-10-24 20:35:10 +0800
categories: [API, Documentation]
---
任何人使用你的 API 服务，首先提及的应该是文档，文档的好坏可以影响使用者对你产品的第一印象。

今天讨论的一些基本要素，将有助于你创建好的 API 文档。

### 明确文档的使用对象

明确文档的使用对象，有助于你决定如何设计文档，编排结构，使用何种语言。你的文档可能被以下角色访问和使用：

#### 开发人员

依据他们的技术，经验，在团队中的角色不同，使用你的文档的方式也会不同。

**新手：**缺乏 API 使用经验的新手往往需要更多的支持，清晰，简洁，分步的教程有助于他们快速入门，简单的代码示例帮助他们理解如何在真实项目中使用。如果你可以让新手快速上手，有利于他们使用其它复杂的功能。

**外部开发人员：**已经使用你 API 文档的人，文档免不了反复被查看，如果通过合理的排版，提供所有功能的概览信息，可以帮助他们快速找到需要的内容。

**调试：**使用你 API 文档的开发人员将不时的遇到问题，良好的问题归纳，有利于他们快速解决问题。

**内部开发人员：**API 服务商往往比较重视外部开发者，忽略内部的开发者，其实内部人员也需要使用 API 文档。

这些只是最常见的使用对象。

#### 决策者

CTO 和产品经理也需要查看和评价你的 API 文档，他们需要知道你的文档是否有益于产品。所以让他们快速、容易的找到他们想要的，对你来说，也很重要。

#### 其他使用者

也许不常见，媒体，技术大牛，技术支持，布道师，甚至是你的竞争对手都可能会查看你的文档。

### 文档的目标

**对于每个接口调用和参数的说明，都是清晰准确的。**

最基本，你应该描述：

* 你的每个 API 调用的作用
* 每个参数及可能的值，包括它们的类型，格式，规则以及是否必需

#### 要有上下文

使用者不会按照顺序阅读你的文档，你也不知道他们会从什么地方开始。这就意味着每个接口，都必须包含必要的，完整的内容说明。

### 示例

为了使用你的 API，开发者也许需要了解他们未知的领域，为了快速让他们了解你的产品，不妨同时也提供这些信息。

将以下内容添加到每一个接口描述中：

* 接口如何调用的示例
* 请求参数的说明
* 返回结果

研究表面，一些开发人员在接触新的文档的时候希望立刻进行编码，他们往往从示例开始了解。相较一行行的文字说明，示例代码更能吸引到他们。

正确使用示例，来提升你的文档。有机会的话，后面会有专门文章来讨论。

### 错误信息

当开发中遇到错误，如果没有详细的文档说明，是令人沮丧的。为了使开发更顺利，错误信息有助于开发理解：

* 这是什么问题
* 错误是源于他的代码还是 API 使用
* 如何解决问题

所有可能的错误，哪怕是不容易遇到的，都应该有错误代码和易于理解的说明。错误信息不仅应该包含与调用相关的信息，也应该包含类似身份验证，HTTP 请求以及其它不受 API 控制的超时，服务器未知错误等。

### 快速入门指南

新手使用你的 API 会面临很多困难：

* 他们处于陡峭的学习曲线开端
* 他们也许不熟悉你的 API 结构，领域和思想
* 对于他们来说，弄清楚从哪里开始，是困难的

如果你把入门弄的简单些，他们可能会不知所措，更不要谈深入使用了。

许多开发者需要通过不停的实践才能变得更好，所以一个快速入门指南是多么的重要。这个指南应该是简洁的，用最少的步骤完成一个有代表性的示例。最好包含产品的基本介绍，更详细的使用说明，就当开发者对你的服务一无所知。

### 教程

教程是逐步演示各个功能的过程，方便开发者能够使用你的服务。

API 的教程，应该遵循每个分步骤都是最佳实践的原则，每个步骤应该包含所必须的信息，无关内容不要出现，防止用户跳脱，保持清晰，明确，简洁是各种文档的优点。如果可以的话，避免上来就使用行业术语，这个应该是逐渐灌输的过程，以利于他们容易的理解文档内容。

教程应该尽量容易让用户完成一个小功能，如果教程过于庞大，想办法分解成一个个小的模块，这样可以确保用户可以获取到他们感兴趣的点，而掠过不感兴趣的步骤。

### 基本主题

使用你的 API，一些重要的基本只是是开发人员需要知道的：

* **认证。**每种 API 可能有所不同，认证（比如：OAuth）往往是复杂和容易出错的。告诉用户，他们怎么获取使用资格，如何传参数到你的服务器，展示 API 认证的例子。
* **错误处理。**现在，错误处理还没有标准化，你需要帮助你的用户理解你的 API 的错误信息返回，为什么会产生错误，怎么解决。
* **HTTP 请求。**你最好提供 HTTP 相关信息，比如：内容类型，状态码和缓存。

使用专门的主题来描述这些知识，并在每个 API 调用文档中链接它们。方便开发者理解你的 API 如何使用这些主题。

### 布局和导航

虽然不是所有 API 文档通用的做法，但是布局和导航对用户来说是重要的，好的布局和导航帮助用户获取他们想获取的信息。

#### 动态设计

最好的 API 文档，采用动态设计，帮助用户在大范围文档中容易找到相关内容，也有助于轻松扩展文档。

#### 单页设计

如果你的 API 文档不是很多，单页设计有利于用户一眼就看到你所有的功能。单页文档也有助于用户使用浏览器的搜索功能。

![](http://pic.zinaer.com/201710/stripe.png)

#### 保持导航

保持导航一直存在，让用户可以一直使用导航。

#### 多列布局

2 ～ 3 列的布局，保持导航在左，说明和示例在右。使理解起来更容易。

#### 语法高亮

使用语法高亮，提高代码示例的可读性，更利于用户理解。

![](http://pic.zinaer.com/201710/plaid.png)

如果想要尝试使用文档布局，可以使用一些[免费的开源 API 文档生成器](https://pronovix.com/blog/free-and-open-source-api-documentation-tools)

### 编辑

所有发表的东西都应该经过编辑的过程，对于文章和出版物这是常识，对于技术文档也同样适用。

API 文档的编辑者，应该确保文档**清晰**和**简洁**，含有所有必要的信息，结构是符合逻辑的，主旨不会被无关信息打断。

编辑者应该对文档进行校对，确保没有错误和任何其它妨碍阅读和理解的东西。同时也要遵守文档的风格，保持统一。

一旦文档准备公布，向可能的用户征求意见，尤其相关功能的开发者是个不错的主意，他们会察觉不妥的地方。

虽然，这将要花费编辑者大量的经历，但是会有一个很值得的产出。

### 保持更新

如果你的文档是陈旧的，废弃的功能还存在，新的功能也没有体现。这是令开发者很头痛的事情。

维护文档时，应该注意以下几个方面：

* **已经废弃的功能** 删除不推荐使用的文档，并说明原因。
* **新功能** 在发布之前记录新功能，并确保有足够的时间进行编辑。
* **反馈** 有用的反馈和分析，第一次编辑不能确保文档是完美的，根据用户的反馈，你可以不断优化它们。

为了确保上述工作能够有效的完成，你需要制定一个维护文档的流程。如果你可以定期检查文档（比如每个季度），那是非常有益的。

通过遵循上述的提到的点，你可以为你的文档奠定坚实的基础。随着与用户的深入了解和互动，你也可以不断精进它们。

[*原文链接*](https://alistapart.com/article/the-ten-essentials-for-good-api-documentation)

====

![](http://pic.zinaer.com/201710/zanshang.jpg)

<small>*微信扫一扫进行赞赏*</small>

![](http://pic.zinaer.com/201710/zinaer_wx.jpg)

<small>*微信扫一扫关注此公众号*</small>
